/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/projects": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all projects */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A list of projects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ProjectListResponse"];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    put?: never;
    /** Create a new project */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProjectCreateRequest"];
        };
      };
      responses: {
        /** @description Project created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ProjectResponse"];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/projects/{projectId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a project by ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          projectId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A project */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ProjectResponse"];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a project */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          projectId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update a project */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          projectId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProjectUpdateRequest"];
        };
      };
      responses: {
        /** @description Project updated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ProjectResponse"];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Project: {
      /**
       * @description The unique identifier for the project
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id?: string;
      /** @description The name of the project */
      name?: string;
      /** @description The description of the project */
      description?: string;
      /** @description The color code for the project (e.g., hex color) */
      color?: string;
    };
    ProjectListResponse: {
      projects?: components["schemas"]["Project"][];
    };
    ProjectCreateRequest: {
      /** @description The name of the project */
      name?: string;
      /** @description The description of the project */
      description?: string;
      /**
       * @description The color code for the project (e.g., hex color)
       * @example #FF5733
       */
      color?: string;
    };
    ProjectUpdateRequest: {
      /** @description The name of the project */
      name?: string;
      /** @description The description of the project */
      description?: string;
      /**
       * @description The color code for the project (e.g., hex color)
       * @example #FF5733
       */
      color?: string;
    };
    ProjectResponse: {
      project?: components["schemas"]["Project"];
    };
    ErrorResponse: {
      /**
       * @description The error message
       * @example プロジェクト名は必須です
       */
      message?: string;
      /**
       * @description The error code for programmatic handling
       * @example VALIDATION_ERROR
       */
      code?: string;
      /** @description Additional error details */
      details?: {
        [key: string]: unknown;
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
